#!/usr/bin/env ruby

#
# Displays the description of a remote gem on stdout.
#

require 'psych' # Require before yaml to avoid bug in how
                # RubyGems 1.5.1 and Ruby 1.9.2 interact.
require 'yaml'
require 'rubygems' # To have Gem::Specification for deserialization
require 'rubygems/commands/specification_command'
require 'rubygems/user_interaction' # For Gem::StreamUI
require 'stringio'

if ARGV.empty? or ARGV.any? { |arg| arg =~ /^(?:--help|-h|-\?)$/ }
  puts "Usage: #{File.basename($0)} name-of-remote-gem"
  exit
end

gem_name = ARGV[0]
# Note: argument verification is handled implicitly by Gem::Command.

#
# Make a remote call for the gem specification.
#
cmd = Gem::Commands::SpecificationCommand.new
cmd.options[:domain] = :remote
cmd.options[:args]   = [ gem_name ]

# Open a string buffer for the command to populate with the spec.
spec_yaml = ''
StringIO.open(spec_yaml, 'w') do |out_str_io|
  cmd.use_ui(Gem::StreamUI.new(STDIN, out_str_io, STDERR)) do
    cmd.execute
  end
end

abort "Aborting: gem specification empty" if spec_yaml.empty?
spec = YAML::load spec_yaml

# This should deserialize to a Gem::Specification.
if spec.respond_to? :description
  puts spec.description
else
  puts "Hmm, not sure what to do with this..."
  p spec
  abort
end
